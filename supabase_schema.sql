-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create a table for storing user profiles
CREATE TABLE profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL PRIMARY KEY,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  full_name TEXT,
  avatar_url TEXT,
  website TEXT,
  role TEXT CHECK (role IN ('admin', 'warehouse', 'delivery')) DEFAULT 'delivery'
);

-- Create a table for customers
CREATE TABLE customers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  address TEXT,
  contact_person TEXT,
  phone TEXT,
  email TEXT,
  is_business BOOLEAN DEFAULT FALSE
);

-- Create a table for cylinder types
CREATE TABLE cylinder_types (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL UNIQUE,
  weight DECIMAL(5,2),
  capacity DECIMAL(5,2) -- in liters
);

-- Create an enum for cylinder status
CREATE TYPE cylinder_status AS ENUM (
  'registered',
  'in_stock',
  'dispatched',
  'delivered',
  'returned',
  'damaged',
  'retired'
);

-- Create a table for cylinders
CREATE TABLE cylinders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  serial_number TEXT NOT NULL UNIQUE,
  cylinder_type_id BIGINT REFERENCES cylinder_types(id) NOT NULL,
  status cylinder_status DEFAULT 'registered',
  current_customer_id BIGINT REFERENCES customers(id),
  notes TEXT
);

-- Create a table for transaction logs
CREATE TABLE transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  cylinder_id BIGINT REFERENCES cylinders(id) NOT NULL,
  from_status cylinder_status,
  to_status cylinder_status NOT NULL,
  performed_by UUID REFERENCES profiles(id) NOT NULL,
  notes TEXT
);

-- Create a table for dispatch orders
CREATE TABLE dispatch_orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  dispatched_at TIMESTAMP WITH TIME ZONE,
  delivered_at TIMESTAMP WITH TIME ZONE,
  returned_at TIMESTAMP WITH TIME ZONE,
  delivery_person_id UUID REFERENCES profiles(id),
  customer_id BIGINT REFERENCES customers(id) NOT NULL,
  status TEXT CHECK (status IN ('pending', 'dispatched', 'delivered', 'returned', 'cancelled')) DEFAULT 'pending'
);

-- Create a table for dispatch order items
CREATE TABLE dispatch_order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  dispatch_order_id BIGINT REFERENCES dispatch_orders(id) ON DELETE CASCADE NOT NULL,
  cylinder_id BIGINT REFERENCES cylinders(id) NOT NULL,
  UNIQUE(dispatch_order_id, cylinder_id)
);

-- Create indexes for better query performance
CREATE INDEX idx_cylinders_status ON cylinders(status);
CREATE INDEX idx_cylinders_serial ON cylinders(serial_number);
CREATE INDEX idx_cylinders_customer ON cylinders(current_customer_id);
CREATE INDEX idx_transactions_cylinder ON transactions(cylinder_id);
CREATE INDEX idx_dispatch_order_items_order ON dispatch_order_items(dispatch_order_id);
CREATE INDEX idx_dispatch_order_items_cylinder ON dispatch_order_items(cylinder_id);

-- Set up Row Level Security (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE cylinder_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE cylinders ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE dispatch_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE dispatch_order_items ENABLE ROW LEVEL SECURITY;

-- RLS policies for profiles
CREATE POLICY "Users can view their own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Admins can view all profiles" ON profiles
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
    )
  );

CREATE POLICY "Admins can update all profiles" ON profiles
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- RLS policies for customers
CREATE POLICY "Authenticated users can view customers" ON customers
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Warehouse and admin roles can create customers" ON customers
  FOR INSERT TO authenticated WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

CREATE POLICY "Warehouse and admin roles can update customers" ON customers
  FOR UPDATE TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

-- RLS policies for cylinder_types
CREATE POLICY "Authenticated users can view cylinder types" ON cylinder_types
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Admin role can create cylinder types" ON cylinder_types
  FOR INSERT TO authenticated WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
    )
  );

CREATE POLICY "Admin role can update cylinder types" ON cylinder_types
  FOR UPDATE TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- RLS policies for cylinders
CREATE POLICY "Authenticated users can view in_stock cylinders" ON cylinders
  FOR SELECT TO authenticated USING (status = 'in_stock');

CREATE POLICY "Warehouse and admin can view all cylinders" ON cylinders
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

CREATE POLICY "Warehouse and admin can manage cylinders" ON cylinders
  FOR ALL TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

-- RLS policies for transactions
CREATE POLICY "Users can view transactions for accessible cylinders" ON transactions
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM cylinders c 
      WHERE c.id = transactions.cylinder_id 
      AND (
        c.status = 'in_stock' 
        OR EXISTS (
          SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
        )
      )
    )
  );

-- RLS policies for dispatch_orders
CREATE POLICY "Users can view their own dispatch orders" ON dispatch_orders
  FOR SELECT TO authenticated USING (delivery_person_id = auth.uid());

CREATE POLICY "Delivery can view orders assigned to them" ON dispatch_orders
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role = 'delivery' AND dispatch_orders.delivery_person_id = auth.uid()
    )
  );

CREATE POLICY "Warehouse and admin can view all orders" ON dispatch_orders
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

CREATE POLICY "Warehouse and admin can manage dispatch orders" ON dispatch_orders
  FOR ALL TO authenticated USING (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
    )
  );

-- RLS policies for dispatch_order_items
CREATE POLICY "Access controlled through dispatch_orders" ON dispatch_order_items
  FOR SELECT TO authenticated USING (
    EXISTS (
      SELECT 1 FROM dispatch_orders d 
      WHERE d.id = dispatch_order_items.dispatch_order_id 
      AND (
        d.delivery_person_id = auth.uid() 
        OR EXISTS (
          SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('warehouse', 'admin')
        )
      )
    )
  );

-- Create a function to automatically log cylinder status changes
CREATE OR REPLACE FUNCTION log_cylinder_status_change()
RETURNS TRIGGER AS $$
BEGIN
  -- Only log if status has changed
  IF OLD.status IS DISTINCT FROM NEW.status THEN
    INSERT INTO transactions (cylinder_id, from_status, to_status, performed_by)
    VALUES (NEW.id, OLD.status, NEW.status, auth.uid());
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically log cylinder status changes
CREATE TRIGGER log_cylinder_status_change_trigger
  AFTER UPDATE OF status ON cylinders
  FOR EACH ROW
  EXECUTE FUNCTION log_cylinder_status_change();

-- Create a function to automatically set the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to automatically set the updated_at timestamp
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_customers_updated_at BEFORE UPDATE ON customers
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_cylinder_types_updated_at BEFORE UPDATE ON cylinder_types
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_cylinders_updated_at BEFORE UPDATE ON cylinders
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_dispatch_orders_updated_at BEFORE UPDATE ON dispatch_orders
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();